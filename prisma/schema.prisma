generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

generator shared {
  provider = "prisma-client-js"
  output   = "../../shared-types"
}

generator nestjsDto {
  provider = "prisma-generator-nestjs"
  output   = "../src/shared/models/gen/dto"
  prettier = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["profile", "knowledge"]
}

model User {
  userId       Int      @id @default(autoincrement())
  username     String   @unique
  password     String
  creationDate DateTime @default(now()) @ignore @db.Timestamptz()
  updateDate   DateTime @updatedAt @ignore @db.Timestamptz()
  person       Person?

  @@schema("profile")
}

model Person {
  personId      Int           @id @default(autoincrement())
  fullname      String
  email         String
  user          User          @relation(fields: [userId], references: [userId])
  userId        Int           @unique
  jobPosition   JobPosition   @relation(fields: [jobPositionId], references: [jobPositionId])
  jobPositionId Int
  conversation  Conversation?

  @@schema("profile")
}

model JobPosition {
  jobPositionId Int        @id @default(autoincrement())
  name          String
  persons       Person[]
  department    Department @relation(fields: [departmentId], references: [departmentId])
  departmentId  Int

  @@schema("profile")
}

model Department {
  departmentId Int           @id @default(autoincrement())
  name         String
  jobPositions JobPosition[]

  @@schema("profile")
}

model Conversation {
  conversationId Int       @id @default(autoincrement())
  person         Person    @relation(fields: [personId], references: [personId])
  personId       Int       @unique
  messages       Message[]

  @@schema("profile")
}

model Message {
  messageId      Int          @id @default(autoincrement())
  role           Role
  text           String
  intent         String
  entities       Json
  timestamp      String
  payload        Json
  conversation   Conversation @relation(fields: [conversationId], references: [conversationId])
  conversationId Int
  fallback       Fallback?

  @@schema("profile")
}

model Fallback {
  fallbackId Int     @id @default(autoincrement())
  reviewed   Boolean
  message    Message @relation(fields: [messageId], references: [messageId])
  messageId  Int     @unique

  @@schema("profile")
}

enum Role {
  USER
  BOT

  @@schema("profile")
}

model Intent {
  intentId Int    @id @default(autoincrement())
  name     String

  @@schema("knowledge")
}

model Entity {
  entityId Int     @id @default(autoincrement())
  name     String
  color    String
  memory   Boolean

  @@schema("knowledge")
}

model Response {
  responseId Int    @id @default(autoincrement())
  name       String
  content    String

  @@schema("knowledge")
}

model Story {
  storyId Int    @id @default(autoincrement())
  name    String

  @@schema("knowledge")
}

model Document {
  documentId Int    @id @default(autoincrement())
  name       String

  @@schema("knowledge")
}
